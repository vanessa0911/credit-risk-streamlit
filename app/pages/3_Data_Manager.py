# app/pages/3_Data_Manager.py
import io
import os
from pathlib import Path
import numpy as np
import pandas as pd
import streamlit as st
from pandas.api.types import is_numeric_dtype

from src.inference import expected_columns  # colonnes que le mod√®le attend

st.set_page_config(page_title="Gestion des donn√©es clients", layout="wide")
st.title("üß∞ Gestion des donn√©es clients (√©chantillonnage & compression)")

ROOT = Path(__file__).resolve().parents[2]
RAW_DIR = ROOT / "data" / "raw"
PROC_DIR = ROOT / "data" / "processed"
PROC_DIR.mkdir(parents=True, exist_ok=True)

st.markdown(
    """
Cette page te permet de **cr√©er une version l√©g√®re** de tes donn√©es clients (‚â§ 25 MB) √† partir d‚Äôun gros CSV :

1. **D√©pose** un CSV (ou choisis-en un d√©j√† pr√©sent).
2. **Garde** uniquement les colonnes utiles (celles du mod√®le).
3. **√âchantillonne** automatiquement le bon nombre de lignes.
4. **Compresse** en `sample_clients.csv.gz` (pr√™te pour GitHub).
    """
)

# ------------------------------------------------------------
# 1) Source de donn√©es : upload ou fichier d√©j√† dans data/raw/
# ------------------------------------------------------------
RAW_DIR.mkdir(parents=True, exist_ok=True)
st.subheader("1) Choisir la source")

uploaded = st.file_uploader("D√©poser un gros CSV (optionnel) ‚Äî il ne sera pas commit√©", type=["csv"])
existing_files = sorted(list(RAW_DIR.glob("*.csv")))
choice = st.selectbox(
    "‚Ä¶ ou s√©lectionner un CSV d√©j√† dans data/raw/",
    ["‚Äî Aucun ‚Äî"] + [str(f.relative_to(ROOT)) for f in existing_files],
    index=0
)

df = None
source_name = None

if uploaded is not None:
    source_name = uploaded.name
    with st.spinner("Lecture du CSV upload√©‚Ä¶"):
        df = pd.read_csv(uploaded, low_memory=False)
elif choice != "‚Äî Aucun ‚Äî":
    source_name = choice
    with st.spinner(f"Lecture de {choice}‚Ä¶"):
        df = pd.read_csv(ROOT / choice, low_memory=False)

if df is None:
    st.info("D√©pose un fichier **ou** choisis-en un dans `data/raw/` pour continuer.")
    st.stop()

st.success(f"Source charg√©e : **{source_name}** ‚Äî {len(df):,} lignes, {df.shape[1]} colonnes")
with st.expander("Aper√ßu (10 premi√®res lignes)"):
    st.dataframe(df.head(10), use_container_width=True)

# ------------------------------------------------------------
# 2) S√©lection automatique des colonnes pertinentes
# ------------------------------------------------------------
st.subheader("2) Colonnes √† garder")

expected = expected_columns() or []
expected_set = set(expected)

# On conserve : colonnes du mod√®le + colonnes ID si pr√©sentes
id_candidates = [c for c in ["SK_ID_CURR", "client_id", "ID", "customer_id", "id"] if c in df.columns]
keep = [c for c in df.columns if c in expected_set]
for cid in id_candidates:
    if cid not in keep:
        keep.append(cid)

# Si aucune colonne du mod√®le n'est trouv√©e, on garde tout (et on pr√©viendra)
if not keep:
    st.warning("Aucune colonne du mod√®le n‚Äôa √©t√© trouv√©e dans ce CSV. On gardera **toutes** les colonnes.")
    keep = list(df.columns)

sel_cols = st.multiselect(
    "Colonnes conserv√©es (tu peux ajuster) :",
    options=list(df.columns),
    default=keep,
)

df_sel = df[sel_cols].copy()

# Downcast num√©rique pour r√©duire la taille
for c in df_sel.columns:
    if is_numeric_dtype(df_sel[c]):
        # essaie int -> sinon float -> sinon laisse
        as_int = pd.to_numeric(df_sel[c], errors="coerce", downcast="integer")
        if as_int.notna().sum() >= df_sel[c].notna().sum() * 0.9:
            df_sel[c] = as_int
        else:
            df_sel[c] = pd.to_numeric(df_sel[c], errors="coerce", downcast="float")

st.write(f"Colonnes retenues : **{len(sel_cols)}**")

# ------------------------------------------------------------
# 3) D√©terminer automatiquement le bon √©chantillon (‚â§ 25 MB)
# ------------------------------------------------------------
st.subheader("3) √âchantillonnage & cible de taille")
target_mb = st.slider("Taille maximale du fichier compress√© (.csv.gz)", 5, 25, 20, 1)
target_bytes = target_mb * 1024 * 1024

# Column pour stratifier si dispo
strat_col = st.selectbox(
    "Stratifier l‚Äô√©chantillon (optionnel)", 
    ["‚Äî Aucune ‚Äî"] + [c for c in df_sel.columns if c.lower() in {"target", "default", "y"}],
    index=0
)
if strat_col == "‚Äî Aucune ‚Äî":
    strat_col = None

def estimate_rows_for_target(df_in: pd.DataFrame, target_bytes: int, sample_rows: int = 5000) -> int:
    """Estime le nombre de lignes √† prendre pour respecter la taille cible apr√®s compression gzip."""
    n = len(df_in)
    if n <= sample_rows:
        test = df_in
    else:
        test = df_in.sample(sample_rows, random_state=42)
    buf = io.BytesIO()
    test.to_csv(buf, index=False, compression="gzip")
    bytes_per_row = max(1, buf.tell() / len(test))
    est = int(target_bytes / bytes_per_row)
    return max(1, min(n, est))

est_n = estimate_rows_for_target(df_sel, target_bytes)
st.write(f"**Estimation automatique** : ~ **{est_n:,}** lignes pour ‚âà {target_mb} MB.")

n_rows = st.number_input("Forcer le nombre de lignes (optionnel)", min_value=1, max_value=len(df_sel), value=est_n, step=1)

with st.spinner("Cr√©ation de l‚Äô√©chantillon‚Ä¶"):
    if n_rows >= len(df_sel):
        df_out = df_sel
    else:
        if strat_col and strat_col in df_sel.columns:
            # √©chantillon stratifi√© grossier
            df_out = (
                df_sel.groupby(strat_col, group_keys=False)
                .apply(lambda g: g.sample(max(1, int(np.ceil(len(g) * n_rows / len(df_sel)))), random_state=42))
            )
            # ajustement si l√©ger d√©passement
            if len(df_out) > n_rows:
                df_out = df_out.sample(n_rows, random_state=42)
        else:
            df_out = df_sel.sample(n_rows, random_state=42)

st.success(f"√âchantillon cr√©√© : **{len(df_out):,}** lignes, {df_out.shape[1]} colonnes")

with st.expander("Aper√ßu de l‚Äô√©chantillon"):
    st.dataframe(df_out.head(20), use_container_width=True)

# ------------------------------------------------------------
# 4) Sauvegarde compress√©e + v√©rification de taille
# ------------------------------------------------------------
st.subheader("4) Sauvegarder en .csv.gz (pr√™t pour GitHub)")
out_path = PROC_DIR / "sample_clients.csv.gz"

if st.button("üíæ Enregistrer `data/processed/sample_clients.csv.gz`"):
    with st.spinner("√âcriture du fichier compress√©‚Ä¶"):
        df_out.to_csv(out_path, index=False, compression="gzip")

    size = out_path.stat().st_size
    st.success(f"Fichier √©crit : **{out_path.relative_to(ROOT)}** ‚Äî **{size/1024/1024:.2f} MB**")
    st.download_button(
        "‚¨áÔ∏è T√©l√©charger ce fichier",
        data=out_path.read_bytes(),
        file_name="sample_clients.csv.gz",
        mime="application/gzip",
    )

st.caption(
    "Astuce : si le fichier d√©passe encore 25 MB, baisse la cible ou retire des colonnes non utilis√©es par le mod√®le."
)
